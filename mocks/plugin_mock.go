// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/NeuralTrust/TrustGate/pkg/types"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

type Plugin_Expecter struct {
	mock *mock.Mock
}

func (_m *Plugin) EXPECT() *Plugin_Expecter {
	return &Plugin_Expecter{mock: &_m.Mock}
}

// AllowedStages provides a mock function with no fields
func (_m *Plugin) AllowedStages() []types.Stage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllowedStages")
	}

	var r0 []types.Stage
	if rf, ok := ret.Get(0).(func() []types.Stage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Stage)
		}
	}

	return r0
}

// Plugin_AllowedStages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllowedStages'
type Plugin_AllowedStages_Call struct {
	*mock.Call
}

// AllowedStages is a helper method to define mock.On call
func (_e *Plugin_Expecter) AllowedStages() *Plugin_AllowedStages_Call {
	return &Plugin_AllowedStages_Call{Call: _e.mock.On("AllowedStages")}
}

func (_c *Plugin_AllowedStages_Call) Run(run func()) *Plugin_AllowedStages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Plugin_AllowedStages_Call) Return(_a0 []types.Stage) *Plugin_AllowedStages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_AllowedStages_Call) RunAndReturn(run func() []types.Stage) *Plugin_AllowedStages_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, cfg, req, resp
func (_m *Plugin) Execute(ctx context.Context, cfg types.PluginConfig, req *types.RequestContext, resp *types.ResponseContext) (*types.PluginResponse, error) {
	ret := _m.Called(ctx, cfg, req, resp)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *types.PluginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PluginConfig, *types.RequestContext, *types.ResponseContext) (*types.PluginResponse, error)); ok {
		return rf(ctx, cfg, req, resp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PluginConfig, *types.RequestContext, *types.ResponseContext) *types.PluginResponse); ok {
		r0 = rf(ctx, cfg, req, resp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PluginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PluginConfig, *types.RequestContext, *types.ResponseContext) error); ok {
		r1 = rf(ctx, cfg, req, resp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Plugin_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Plugin_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg types.PluginConfig
//   - req *types.RequestContext
//   - resp *types.ResponseContext
func (_e *Plugin_Expecter) Execute(ctx interface{}, cfg interface{}, req interface{}, resp interface{}) *Plugin_Execute_Call {
	return &Plugin_Execute_Call{Call: _e.mock.On("Execute", ctx, cfg, req, resp)}
}

func (_c *Plugin_Execute_Call) Run(run func(ctx context.Context, cfg types.PluginConfig, req *types.RequestContext, resp *types.ResponseContext)) *Plugin_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PluginConfig), args[2].(*types.RequestContext), args[3].(*types.ResponseContext))
	})
	return _c
}

func (_c *Plugin_Execute_Call) Return(_a0 *types.PluginResponse, _a1 error) *Plugin_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Plugin_Execute_Call) RunAndReturn(run func(context.Context, types.PluginConfig, *types.RequestContext, *types.ResponseContext) (*types.PluginResponse, error)) *Plugin_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *Plugin) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Plugin_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Plugin_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Plugin_Expecter) Name() *Plugin_Name_Call {
	return &Plugin_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Plugin_Name_Call) Run(run func()) *Plugin_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Plugin_Name_Call) Return(_a0 string) *Plugin_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_Name_Call) RunAndReturn(run func() string) *Plugin_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RequiredPlugins provides a mock function with no fields
func (_m *Plugin) RequiredPlugins() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RequiredPlugins")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Plugin_RequiredPlugins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequiredPlugins'
type Plugin_RequiredPlugins_Call struct {
	*mock.Call
}

// RequiredPlugins is a helper method to define mock.On call
func (_e *Plugin_Expecter) RequiredPlugins() *Plugin_RequiredPlugins_Call {
	return &Plugin_RequiredPlugins_Call{Call: _e.mock.On("RequiredPlugins")}
}

func (_c *Plugin_RequiredPlugins_Call) Run(run func()) *Plugin_RequiredPlugins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Plugin_RequiredPlugins_Call) Return(_a0 []string) *Plugin_RequiredPlugins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_RequiredPlugins_Call) RunAndReturn(run func() []string) *Plugin_RequiredPlugins_Call {
	_c.Call.Return(run)
	return _c
}

// Stages provides a mock function with no fields
func (_m *Plugin) Stages() []types.Stage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stages")
	}

	var r0 []types.Stage
	if rf, ok := ret.Get(0).(func() []types.Stage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Stage)
		}
	}

	return r0
}

// Plugin_Stages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stages'
type Plugin_Stages_Call struct {
	*mock.Call
}

// Stages is a helper method to define mock.On call
func (_e *Plugin_Expecter) Stages() *Plugin_Stages_Call {
	return &Plugin_Stages_Call{Call: _e.mock.On("Stages")}
}

func (_c *Plugin_Stages_Call) Run(run func()) *Plugin_Stages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Plugin_Stages_Call) Return(_a0 []types.Stage) *Plugin_Stages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_Stages_Call) RunAndReturn(run func() []types.Stage) *Plugin_Stages_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateConfig provides a mock function with given fields: config
func (_m *Plugin) ValidateConfig(config types.PluginConfig) error {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.PluginConfig) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Plugin_ValidateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateConfig'
type Plugin_ValidateConfig_Call struct {
	*mock.Call
}

// ValidateConfig is a helper method to define mock.On call
//   - config types.PluginConfig
func (_e *Plugin_Expecter) ValidateConfig(config interface{}) *Plugin_ValidateConfig_Call {
	return &Plugin_ValidateConfig_Call{Call: _e.mock.On("ValidateConfig", config)}
}

func (_c *Plugin_ValidateConfig_Call) Run(run func(config types.PluginConfig)) *Plugin_ValidateConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.PluginConfig))
	})
	return _c
}

func (_c *Plugin_ValidateConfig_Call) Return(_a0 error) *Plugin_ValidateConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_ValidateConfig_Call) RunAndReturn(run func(types.PluginConfig) error) *Plugin_ValidateConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewPlugin creates a new instance of Plugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *Plugin {
	mock := &Plugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
