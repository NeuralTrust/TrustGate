// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	embedding "github.com/NeuralTrust/TrustGate/pkg/domain/embedding"
	mock "github.com/stretchr/testify/mock"
)

// EmbeddingRepository is an autogenerated mock type for the EmbeddingRepository type
type EmbeddingRepository struct {
	mock.Mock
}

type EmbeddingRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *EmbeddingRepository) EXPECT() *EmbeddingRepository_Expecter {
	return &EmbeddingRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, index, keyQuery
func (_m *EmbeddingRepository) Count(ctx context.Context, index string, keyQuery string) (int, error) {
	ret := _m.Called(ctx, index, keyQuery)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int, error)); ok {
		return rf(ctx, index, keyQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, index, keyQuery)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, index, keyQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmbeddingRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type EmbeddingRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - keyQuery string
func (_e *EmbeddingRepository_Expecter) Count(ctx interface{}, index interface{}, keyQuery interface{}) *EmbeddingRepository_Count_Call {
	return &EmbeddingRepository_Count_Call{Call: _e.mock.On("Count", ctx, index, keyQuery)}
}

func (_c *EmbeddingRepository_Count_Call) Run(run func(ctx context.Context, index string, keyQuery string)) *EmbeddingRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *EmbeddingRepository_Count_Call) Return(_a0 int, _a1 error) *EmbeddingRepository_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmbeddingRepository_Count_Call) RunAndReturn(run func(context.Context, string, string) (int, error)) *EmbeddingRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTargetID provides a mock function with given fields: ctx, targetID
func (_m *EmbeddingRepository) GetByTargetID(ctx context.Context, targetID string) (*embedding.Embedding, error) {
	ret := _m.Called(ctx, targetID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTargetID")
	}

	var r0 *embedding.Embedding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*embedding.Embedding, error)); ok {
		return rf(ctx, targetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *embedding.Embedding); ok {
		r0 = rf(ctx, targetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*embedding.Embedding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, targetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmbeddingRepository_GetByTargetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTargetID'
type EmbeddingRepository_GetByTargetID_Call struct {
	*mock.Call
}

// GetByTargetID is a helper method to define mock.On call
//   - ctx context.Context
//   - targetID string
func (_e *EmbeddingRepository_Expecter) GetByTargetID(ctx interface{}, targetID interface{}) *EmbeddingRepository_GetByTargetID_Call {
	return &EmbeddingRepository_GetByTargetID_Call{Call: _e.mock.On("GetByTargetID", ctx, targetID)}
}

func (_c *EmbeddingRepository_GetByTargetID_Call) Run(run func(ctx context.Context, targetID string)) *EmbeddingRepository_GetByTargetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EmbeddingRepository_GetByTargetID_Call) Return(_a0 *embedding.Embedding, _a1 error) *EmbeddingRepository_GetByTargetID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmbeddingRepository_GetByTargetID_Call) RunAndReturn(run func(context.Context, string) (*embedding.Embedding, error)) *EmbeddingRepository_GetByTargetID_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, index, query, _a3
func (_m *EmbeddingRepository) Search(ctx context.Context, index string, query string, _a3 *embedding.Embedding) ([]embedding.SearchResult, error) {
	ret := _m.Called(ctx, index, query, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []embedding.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *embedding.Embedding) ([]embedding.SearchResult, error)); ok {
		return rf(ctx, index, query, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *embedding.Embedding) []embedding.SearchResult); ok {
		r0 = rf(ctx, index, query, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]embedding.SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *embedding.Embedding) error); ok {
		r1 = rf(ctx, index, query, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmbeddingRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type EmbeddingRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
//   - _a3 *embedding.Embedding
func (_e *EmbeddingRepository_Expecter) Search(ctx interface{}, index interface{}, query interface{}, _a3 interface{}) *EmbeddingRepository_Search_Call {
	return &EmbeddingRepository_Search_Call{Call: _e.mock.On("Search", ctx, index, query, _a3)}
}

func (_c *EmbeddingRepository_Search_Call) Run(run func(ctx context.Context, index string, query string, _a3 *embedding.Embedding)) *EmbeddingRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*embedding.Embedding))
	})
	return _c
}

func (_c *EmbeddingRepository_Search_Call) Return(_a0 []embedding.SearchResult, _a1 error) *EmbeddingRepository_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmbeddingRepository_Search_Call) RunAndReturn(run func(context.Context, string, string, *embedding.Embedding) ([]embedding.SearchResult, error)) *EmbeddingRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: ctx, targetID, embeddingData, key
func (_m *EmbeddingRepository) Store(ctx context.Context, targetID string, embeddingData *embedding.Embedding, key string) error {
	ret := _m.Called(ctx, targetID, embeddingData, key)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *embedding.Embedding, string) error); ok {
		r0 = rf(ctx, targetID, embeddingData, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmbeddingRepository_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type EmbeddingRepository_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - targetID string
//   - embeddingData *embedding.Embedding
//   - key string
func (_e *EmbeddingRepository_Expecter) Store(ctx interface{}, targetID interface{}, embeddingData interface{}, key interface{}) *EmbeddingRepository_Store_Call {
	return &EmbeddingRepository_Store_Call{Call: _e.mock.On("Store", ctx, targetID, embeddingData, key)}
}

func (_c *EmbeddingRepository_Store_Call) Run(run func(ctx context.Context, targetID string, embeddingData *embedding.Embedding, key string)) *EmbeddingRepository_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*embedding.Embedding), args[3].(string))
	})
	return _c
}

func (_c *EmbeddingRepository_Store_Call) Return(_a0 error) *EmbeddingRepository_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmbeddingRepository_Store_Call) RunAndReturn(run func(context.Context, string, *embedding.Embedding, string) error) *EmbeddingRepository_Store_Call {
	_c.Call.Return(run)
	return _c
}

// StoreWithHMSet provides a mock function with given fields: ctx, index, key, gatewayID, _a4, data
func (_m *EmbeddingRepository) StoreWithHMSet(ctx context.Context, index string, key string, gatewayID string, _a4 *embedding.Embedding, data []byte) error {
	ret := _m.Called(ctx, index, key, gatewayID, _a4, data)

	if len(ret) == 0 {
		panic("no return value specified for StoreWithHMSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *embedding.Embedding, []byte) error); ok {
		r0 = rf(ctx, index, key, gatewayID, _a4, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmbeddingRepository_StoreWithHMSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreWithHMSet'
type EmbeddingRepository_StoreWithHMSet_Call struct {
	*mock.Call
}

// StoreWithHMSet is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - key string
//   - gatewayID string
//   - _a4 *embedding.Embedding
//   - data []byte
func (_e *EmbeddingRepository_Expecter) StoreWithHMSet(ctx interface{}, index interface{}, key interface{}, gatewayID interface{}, _a4 interface{}, data interface{}) *EmbeddingRepository_StoreWithHMSet_Call {
	return &EmbeddingRepository_StoreWithHMSet_Call{Call: _e.mock.On("StoreWithHMSet", ctx, index, key, gatewayID, _a4, data)}
}

func (_c *EmbeddingRepository_StoreWithHMSet_Call) Run(run func(ctx context.Context, index string, key string, gatewayID string, _a4 *embedding.Embedding, data []byte)) *EmbeddingRepository_StoreWithHMSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*embedding.Embedding), args[5].([]byte))
	})
	return _c
}

func (_c *EmbeddingRepository_StoreWithHMSet_Call) Return(_a0 error) *EmbeddingRepository_StoreWithHMSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmbeddingRepository_StoreWithHMSet_Call) RunAndReturn(run func(context.Context, string, string, string, *embedding.Embedding, []byte) error) *EmbeddingRepository_StoreWithHMSet_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmbeddingRepository creates a new instance of EmbeddingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmbeddingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmbeddingRepository {
	mock := &EmbeddingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
