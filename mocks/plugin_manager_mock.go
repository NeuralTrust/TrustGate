// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pluginiface "github.com/NeuralTrust/TrustGate/pkg/pluginiface"
	mock "github.com/stretchr/testify/mock"

	types "github.com/NeuralTrust/TrustGate/pkg/types"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// ClearPluginChain provides a mock function with given fields: id
func (_m *Manager) ClearPluginChain(id string) {
	_m.Called(id)
}

// Manager_ClearPluginChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearPluginChain'
type Manager_ClearPluginChain_Call struct {
	*mock.Call
}

// ClearPluginChain is a helper method to define mock.On call
//   - id string
func (_e *Manager_Expecter) ClearPluginChain(id interface{}) *Manager_ClearPluginChain_Call {
	return &Manager_ClearPluginChain_Call{Call: _e.mock.On("ClearPluginChain", id)}
}

func (_c *Manager_ClearPluginChain_Call) Run(run func(id string)) *Manager_ClearPluginChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_ClearPluginChain_Call) Return() *Manager_ClearPluginChain_Call {
	_c.Call.Return()
	return _c
}

func (_c *Manager_ClearPluginChain_Call) RunAndReturn(run func(string)) *Manager_ClearPluginChain_Call {
	_c.Run(run)
	return _c
}

// ExecuteStage provides a mock function with given fields: ctx, stage, gatewayID, req, resp
func (_m *Manager) ExecuteStage(ctx context.Context, stage types.Stage, gatewayID string, req *types.RequestContext, resp *types.ResponseContext) (*types.ResponseContext, error) {
	ret := _m.Called(ctx, stage, gatewayID, req, resp)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteStage")
	}

	var r0 *types.ResponseContext
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Stage, string, *types.RequestContext, *types.ResponseContext) (*types.ResponseContext, error)); ok {
		return rf(ctx, stage, gatewayID, req, resp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Stage, string, *types.RequestContext, *types.ResponseContext) *types.ResponseContext); ok {
		r0 = rf(ctx, stage, gatewayID, req, resp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseContext)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Stage, string, *types.RequestContext, *types.ResponseContext) error); ok {
		r1 = rf(ctx, stage, gatewayID, req, resp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_ExecuteStage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteStage'
type Manager_ExecuteStage_Call struct {
	*mock.Call
}

// ExecuteStage is a helper method to define mock.On call
//   - ctx context.Context
//   - stage types.Stage
//   - gatewayID string
//   - req *types.RequestContext
//   - resp *types.ResponseContext
func (_e *Manager_Expecter) ExecuteStage(ctx interface{}, stage interface{}, gatewayID interface{}, req interface{}, resp interface{}) *Manager_ExecuteStage_Call {
	return &Manager_ExecuteStage_Call{Call: _e.mock.On("ExecuteStage", ctx, stage, gatewayID, req, resp)}
}

func (_c *Manager_ExecuteStage_Call) Run(run func(ctx context.Context, stage types.Stage, gatewayID string, req *types.RequestContext, resp *types.ResponseContext)) *Manager_ExecuteStage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Stage), args[2].(string), args[3].(*types.RequestContext), args[4].(*types.ResponseContext))
	})
	return _c
}

func (_c *Manager_ExecuteStage_Call) Return(_a0 *types.ResponseContext, _a1 error) *Manager_ExecuteStage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_ExecuteStage_Call) RunAndReturn(run func(context.Context, types.Stage, string, *types.RequestContext, *types.ResponseContext) (*types.ResponseContext, error)) *Manager_ExecuteStage_Call {
	_c.Call.Return(run)
	return _c
}

// GetChains provides a mock function with given fields: entityID, stage
func (_m *Manager) GetChains(entityID string, stage types.Stage) [][]types.PluginConfig {
	ret := _m.Called(entityID, stage)

	if len(ret) == 0 {
		panic("no return value specified for GetChains")
	}

	var r0 [][]types.PluginConfig
	if rf, ok := ret.Get(0).(func(string, types.Stage) [][]types.PluginConfig); ok {
		r0 = rf(entityID, stage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]types.PluginConfig)
		}
	}

	return r0
}

// Manager_GetChains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChains'
type Manager_GetChains_Call struct {
	*mock.Call
}

// GetChains is a helper method to define mock.On call
//   - entityID string
//   - stage types.Stage
func (_e *Manager_Expecter) GetChains(entityID interface{}, stage interface{}) *Manager_GetChains_Call {
	return &Manager_GetChains_Call{Call: _e.mock.On("GetChains", entityID, stage)}
}

func (_c *Manager_GetChains_Call) Run(run func(entityID string, stage types.Stage)) *Manager_GetChains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(types.Stage))
	})
	return _c
}

func (_c *Manager_GetChains_Call) Return(_a0 [][]types.PluginConfig) *Manager_GetChains_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetChains_Call) RunAndReturn(run func(string, types.Stage) [][]types.PluginConfig) *Manager_GetChains_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlugin provides a mock function with given fields: name
func (_m *Manager) GetPlugin(name string) pluginiface.Plugin {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetPlugin")
	}

	var r0 pluginiface.Plugin
	if rf, ok := ret.Get(0).(func(string) pluginiface.Plugin); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pluginiface.Plugin)
		}
	}

	return r0
}

// Manager_GetPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlugin'
type Manager_GetPlugin_Call struct {
	*mock.Call
}

// GetPlugin is a helper method to define mock.On call
//   - name string
func (_e *Manager_Expecter) GetPlugin(name interface{}) *Manager_GetPlugin_Call {
	return &Manager_GetPlugin_Call{Call: _e.mock.On("GetPlugin", name)}
}

func (_c *Manager_GetPlugin_Call) Run(run func(name string)) *Manager_GetPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetPlugin_Call) Return(_a0 pluginiface.Plugin) *Manager_GetPlugin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetPlugin_Call) RunAndReturn(run func(string) pluginiface.Plugin) *Manager_GetPlugin_Call {
	_c.Call.Return(run)
	return _c
}

// InitializePlugins provides a mock function with no fields
func (_m *Manager) InitializePlugins() {
	_m.Called()
}

// Manager_InitializePlugins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializePlugins'
type Manager_InitializePlugins_Call struct {
	*mock.Call
}

// InitializePlugins is a helper method to define mock.On call
func (_e *Manager_Expecter) InitializePlugins() *Manager_InitializePlugins_Call {
	return &Manager_InitializePlugins_Call{Call: _e.mock.On("InitializePlugins")}
}

func (_c *Manager_InitializePlugins_Call) Run(run func()) *Manager_InitializePlugins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_InitializePlugins_Call) Return() *Manager_InitializePlugins_Call {
	_c.Call.Return()
	return _c
}

func (_c *Manager_InitializePlugins_Call) RunAndReturn(run func()) *Manager_InitializePlugins_Call {
	_c.Run(run)
	return _c
}

// RegisterPlugin provides a mock function with given fields: plugin
func (_m *Manager) RegisterPlugin(plugin pluginiface.Plugin) error {
	ret := _m.Called(plugin)

	if len(ret) == 0 {
		panic("no return value specified for RegisterPlugin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(pluginiface.Plugin) error); ok {
		r0 = rf(plugin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_RegisterPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPlugin'
type Manager_RegisterPlugin_Call struct {
	*mock.Call
}

// RegisterPlugin is a helper method to define mock.On call
//   - plugin pluginiface.Plugin
func (_e *Manager_Expecter) RegisterPlugin(plugin interface{}) *Manager_RegisterPlugin_Call {
	return &Manager_RegisterPlugin_Call{Call: _e.mock.On("RegisterPlugin", plugin)}
}

func (_c *Manager_RegisterPlugin_Call) Run(run func(plugin pluginiface.Plugin)) *Manager_RegisterPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pluginiface.Plugin))
	})
	return _c
}

func (_c *Manager_RegisterPlugin_Call) Return(_a0 error) *Manager_RegisterPlugin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_RegisterPlugin_Call) RunAndReturn(run func(pluginiface.Plugin) error) *Manager_RegisterPlugin_Call {
	_c.Call.Return(run)
	return _c
}

// SetPluginChain provides a mock function with given fields: gatewayId, chains
func (_m *Manager) SetPluginChain(gatewayId string, chains []types.PluginConfig) error {
	ret := _m.Called(gatewayId, chains)

	if len(ret) == 0 {
		panic("no return value specified for SetPluginChain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []types.PluginConfig) error); ok {
		r0 = rf(gatewayId, chains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_SetPluginChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPluginChain'
type Manager_SetPluginChain_Call struct {
	*mock.Call
}

// SetPluginChain is a helper method to define mock.On call
//   - gatewayId string
//   - chains []types.PluginConfig
func (_e *Manager_Expecter) SetPluginChain(gatewayId interface{}, chains interface{}) *Manager_SetPluginChain_Call {
	return &Manager_SetPluginChain_Call{Call: _e.mock.On("SetPluginChain", gatewayId, chains)}
}

func (_c *Manager_SetPluginChain_Call) Run(run func(gatewayId string, chains []types.PluginConfig)) *Manager_SetPluginChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]types.PluginConfig))
	})
	return _c
}

func (_c *Manager_SetPluginChain_Call) Return(_a0 error) *Manager_SetPluginChain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_SetPluginChain_Call) RunAndReturn(run func(string, []types.PluginConfig) error) *Manager_SetPluginChain_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePlugin provides a mock function with given fields: name, config
func (_m *Manager) ValidatePlugin(name string, config types.PluginConfig) error {
	ret := _m.Called(name, config)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePlugin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.PluginConfig) error); ok {
		r0 = rf(name, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_ValidatePlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePlugin'
type Manager_ValidatePlugin_Call struct {
	*mock.Call
}

// ValidatePlugin is a helper method to define mock.On call
//   - name string
//   - config types.PluginConfig
func (_e *Manager_Expecter) ValidatePlugin(name interface{}, config interface{}) *Manager_ValidatePlugin_Call {
	return &Manager_ValidatePlugin_Call{Call: _e.mock.On("ValidatePlugin", name, config)}
}

func (_c *Manager_ValidatePlugin_Call) Run(run func(name string, config types.PluginConfig)) *Manager_ValidatePlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(types.PluginConfig))
	})
	return _c
}

func (_c *Manager_ValidatePlugin_Call) Return(_a0 error) *Manager_ValidatePlugin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_ValidatePlugin_Call) RunAndReturn(run func(string, types.PluginConfig) error) *Manager_ValidatePlugin_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
