// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gateway "github.com/NeuralTrust/TrustGate/pkg/domain/gateway"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetGateway provides a mock function with given fields: ctx, id
func (_m *Repository) GetGateway(ctx context.Context, id uuid.UUID) (*gateway.Gateway, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGateway")
	}

	var r0 *gateway.Gateway
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*gateway.Gateway, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *gateway.Gateway); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.Gateway)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGateway'
type Repository_GetGateway_Call struct {
	*mock.Call
}

// GetGateway is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Repository_Expecter) GetGateway(ctx interface{}, id interface{}) *Repository_GetGateway_Call {
	return &Repository_GetGateway_Call{Call: _e.mock.On("GetGateway", ctx, id)}
}

func (_c *Repository_GetGateway_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Repository_GetGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_GetGateway_Call) Return(_a0 *gateway.Gateway, _a1 error) *Repository_GetGateway_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetGateway_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*gateway.Gateway, error)) *Repository_GetGateway_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *Repository) Save(ctx context.Context, _a1 *gateway.Gateway) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gateway.Gateway) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Repository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *gateway.Gateway
func (_e *Repository_Expecter) Save(ctx interface{}, _a1 interface{}) *Repository_Save_Call {
	return &Repository_Save_Call{Call: _e.mock.On("Save", ctx, _a1)}
}

func (_c *Repository_Save_Call) Run(run func(ctx context.Context, _a1 *gateway.Gateway)) *Repository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gateway.Gateway))
	})
	return _c
}

func (_c *Repository_Save_Call) Return(_a0 error) *Repository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Save_Call) RunAndReturn(run func(context.Context, *gateway.Gateway) error) *Repository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
