// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/NeuralTrust/TrustGate/pkg/types"

	uuid "github.com/google/uuid"
)

// DataFinder is an autogenerated mock type for the DataFinder type
type DataFinder struct {
	mock.Mock
}

type DataFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *DataFinder) EXPECT() *DataFinder_Expecter {
	return &DataFinder_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: ctx, gatewayID
func (_m *DataFinder) Find(ctx context.Context, gatewayID uuid.UUID) (*types.GatewayData, error) {
	ret := _m.Called(ctx, gatewayID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *types.GatewayData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*types.GatewayData, error)); ok {
		return rf(ctx, gatewayID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *types.GatewayData); ok {
		r0 = rf(ctx, gatewayID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GatewayData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, gatewayID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataFinder_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type DataFinder_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID uuid.UUID
func (_e *DataFinder_Expecter) Find(ctx interface{}, gatewayID interface{}) *DataFinder_Find_Call {
	return &DataFinder_Find_Call{Call: _e.mock.On("Find", ctx, gatewayID)}
}

func (_c *DataFinder_Find_Call) Run(run func(ctx context.Context, gatewayID uuid.UUID)) *DataFinder_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *DataFinder_Find_Call) Return(_a0 *types.GatewayData, _a1 error) *DataFinder_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataFinder_Find_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*types.GatewayData, error)) *DataFinder_Find_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataFinder creates a new instance of DataFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataFinder {
	mock := &DataFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
