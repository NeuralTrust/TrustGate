// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	bedrock "github.com/NeuralTrust/TrustGate/pkg/infra/bedrock"
	bedrockruntime "github.com/aws/aws-sdk-go-v2/service/bedrockruntime"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// ApplyGuardrail provides a mock function with given fields: ctx, params, optFns
func (_m *Client) ApplyGuardrail(ctx context.Context, params *bedrockruntime.ApplyGuardrailInput, optFns ...func(*bedrockruntime.Options)) (*bedrockruntime.ApplyGuardrailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplyGuardrail")
	}

	var r0 *bedrockruntime.ApplyGuardrailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockruntime.ApplyGuardrailInput, ...func(*bedrockruntime.Options)) (*bedrockruntime.ApplyGuardrailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockruntime.ApplyGuardrailInput, ...func(*bedrockruntime.Options)) *bedrockruntime.ApplyGuardrailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockruntime.ApplyGuardrailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockruntime.ApplyGuardrailInput, ...func(*bedrockruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ApplyGuardrail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyGuardrail'
type Client_ApplyGuardrail_Call struct {
	*mock.Call
}

// ApplyGuardrail is a helper method to define mock.On call
//   - ctx context.Context
//   - params *bedrockruntime.ApplyGuardrailInput
//   - optFns ...func(*bedrockruntime.Options)
func (_e *Client_Expecter) ApplyGuardrail(ctx interface{}, params interface{}, optFns ...interface{}) *Client_ApplyGuardrail_Call {
	return &Client_ApplyGuardrail_Call{Call: _e.mock.On("ApplyGuardrail",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Client_ApplyGuardrail_Call) Run(run func(ctx context.Context, params *bedrockruntime.ApplyGuardrailInput, optFns ...func(*bedrockruntime.Options))) *Client_ApplyGuardrail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*bedrockruntime.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*bedrockruntime.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*bedrockruntime.ApplyGuardrailInput), variadicArgs...)
	})
	return _c
}

func (_c *Client_ApplyGuardrail_Call) Return(_a0 *bedrockruntime.ApplyGuardrailOutput, _a1 error) *Client_ApplyGuardrail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ApplyGuardrail_Call) RunAndReturn(run func(context.Context, *bedrockruntime.ApplyGuardrailInput, ...func(*bedrockruntime.Options)) (*bedrockruntime.ApplyGuardrailOutput, error)) *Client_ApplyGuardrail_Call {
	_c.Call.Return(run)
	return _c
}

// BuildClient provides a mock function with given fields: ctx, accessKey, secretKey, region
func (_m *Client) BuildClient(ctx context.Context, accessKey string, secretKey string, region string) (bedrock.Client, error) {
	ret := _m.Called(ctx, accessKey, secretKey, region)

	if len(ret) == 0 {
		panic("no return value specified for BuildClient")
	}

	var r0 bedrock.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bedrock.Client, error)); ok {
		return rf(ctx, accessKey, secretKey, region)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bedrock.Client); ok {
		r0 = rf(ctx, accessKey, secretKey, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bedrock.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, accessKey, secretKey, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_BuildClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildClient'
type Client_BuildClient_Call struct {
	*mock.Call
}

// BuildClient is a helper method to define mock.On call
//   - ctx context.Context
//   - accessKey string
//   - secretKey string
//   - region string
func (_e *Client_Expecter) BuildClient(ctx interface{}, accessKey interface{}, secretKey interface{}, region interface{}) *Client_BuildClient_Call {
	return &Client_BuildClient_Call{Call: _e.mock.On("BuildClient", ctx, accessKey, secretKey, region)}
}

func (_c *Client_BuildClient_Call) Run(run func(ctx context.Context, accessKey string, secretKey string, region string)) *Client_BuildClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Client_BuildClient_Call) Return(_a0 bedrock.Client, _a1 error) *Client_BuildClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_BuildClient_Call) RunAndReturn(run func(context.Context, string, string, string) (bedrock.Client, error)) *Client_BuildClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
