// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	fingerprint "github.com/NeuralTrust/TrustGate/pkg/infra/fingerprint"
	fiber "github.com/gofiber/fiber/v2"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Tracker is an autogenerated mock type for the Tracker type
type Tracker struct {
	mock.Mock
}

type Tracker_Expecter struct {
	mock *mock.Mock
}

func (_m *Tracker) EXPECT() *Tracker_Expecter {
	return &Tracker_Expecter{mock: &_m.Mock}
}

// BlockFingerprint provides a mock function with given fields: ctx, fp, duration
func (_m *Tracker) BlockFingerprint(ctx context.Context, fp *fingerprint.Fingerprint, duration time.Duration) error {
	ret := _m.Called(ctx, fp, duration)

	if len(ret) == 0 {
		panic("no return value specified for BlockFingerprint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fingerprint.Fingerprint, time.Duration) error); ok {
		r0 = rf(ctx, fp, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tracker_BlockFingerprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockFingerprint'
type Tracker_BlockFingerprint_Call struct {
	*mock.Call
}

// BlockFingerprint is a helper method to define mock.On call
//   - ctx context.Context
//   - fp *fingerprint.Fingerprint
//   - duration time.Duration
func (_e *Tracker_Expecter) BlockFingerprint(ctx interface{}, fp interface{}, duration interface{}) *Tracker_BlockFingerprint_Call {
	return &Tracker_BlockFingerprint_Call{Call: _e.mock.On("BlockFingerprint", ctx, fp, duration)}
}

func (_c *Tracker_BlockFingerprint_Call) Run(run func(ctx context.Context, fp *fingerprint.Fingerprint, duration time.Duration)) *Tracker_BlockFingerprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*fingerprint.Fingerprint), args[2].(time.Duration))
	})
	return _c
}

func (_c *Tracker_BlockFingerprint_Call) Return(_a0 error) *Tracker_BlockFingerprint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Tracker_BlockFingerprint_Call) RunAndReturn(run func(context.Context, *fingerprint.Fingerprint, time.Duration) error) *Tracker_BlockFingerprint_Call {
	_c.Call.Return(run)
	return _c
}

// CountBlockedSimilarFingerprints provides a mock function with given fields: ctx, fps
func (_m *Tracker) CountBlockedSimilarFingerprints(ctx context.Context, fps []fingerprint.Fingerprint) (int, error) {
	ret := _m.Called(ctx, fps)

	if len(ret) == 0 {
		panic("no return value specified for CountBlockedSimilarFingerprints")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []fingerprint.Fingerprint) (int, error)); ok {
		return rf(ctx, fps)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []fingerprint.Fingerprint) int); ok {
		r0 = rf(ctx, fps)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []fingerprint.Fingerprint) error); ok {
		r1 = rf(ctx, fps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tracker_CountBlockedSimilarFingerprints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountBlockedSimilarFingerprints'
type Tracker_CountBlockedSimilarFingerprints_Call struct {
	*mock.Call
}

// CountBlockedSimilarFingerprints is a helper method to define mock.On call
//   - ctx context.Context
//   - fps []fingerprint.Fingerprint
func (_e *Tracker_Expecter) CountBlockedSimilarFingerprints(ctx interface{}, fps interface{}) *Tracker_CountBlockedSimilarFingerprints_Call {
	return &Tracker_CountBlockedSimilarFingerprints_Call{Call: _e.mock.On("CountBlockedSimilarFingerprints", ctx, fps)}
}

func (_c *Tracker_CountBlockedSimilarFingerprints_Call) Run(run func(ctx context.Context, fps []fingerprint.Fingerprint)) *Tracker_CountBlockedSimilarFingerprints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]fingerprint.Fingerprint))
	})
	return _c
}

func (_c *Tracker_CountBlockedSimilarFingerprints_Call) Return(_a0 int, _a1 error) *Tracker_CountBlockedSimilarFingerprints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Tracker_CountBlockedSimilarFingerprints_Call) RunAndReturn(run func(context.Context, []fingerprint.Fingerprint) (int, error)) *Tracker_CountBlockedSimilarFingerprints_Call {
	_c.Call.Return(run)
	return _c
}

// CountMaliciousSimilarFingerprints provides a mock function with given fields: ctx, fps, blockThreshold
func (_m *Tracker) CountMaliciousSimilarFingerprints(ctx context.Context, fps []fingerprint.Fingerprint, blockThreshold float64) (int, error) {
	ret := _m.Called(ctx, fps, blockThreshold)

	if len(ret) == 0 {
		panic("no return value specified for CountMaliciousSimilarFingerprints")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []fingerprint.Fingerprint, float64) (int, error)); ok {
		return rf(ctx, fps, blockThreshold)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []fingerprint.Fingerprint, float64) int); ok {
		r0 = rf(ctx, fps, blockThreshold)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []fingerprint.Fingerprint, float64) error); ok {
		r1 = rf(ctx, fps, blockThreshold)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tracker_CountMaliciousSimilarFingerprints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountMaliciousSimilarFingerprints'
type Tracker_CountMaliciousSimilarFingerprints_Call struct {
	*mock.Call
}

// CountMaliciousSimilarFingerprints is a helper method to define mock.On call
//   - ctx context.Context
//   - fps []fingerprint.Fingerprint
//   - blockThreshold float64
func (_e *Tracker_Expecter) CountMaliciousSimilarFingerprints(ctx interface{}, fps interface{}, blockThreshold interface{}) *Tracker_CountMaliciousSimilarFingerprints_Call {
	return &Tracker_CountMaliciousSimilarFingerprints_Call{Call: _e.mock.On("CountMaliciousSimilarFingerprints", ctx, fps, blockThreshold)}
}

func (_c *Tracker_CountMaliciousSimilarFingerprints_Call) Run(run func(ctx context.Context, fps []fingerprint.Fingerprint, blockThreshold float64)) *Tracker_CountMaliciousSimilarFingerprints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]fingerprint.Fingerprint), args[2].(float64))
	})
	return _c
}

func (_c *Tracker_CountMaliciousSimilarFingerprints_Call) Return(_a0 int, _a1 error) *Tracker_CountMaliciousSimilarFingerprints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Tracker_CountMaliciousSimilarFingerprints_Call) RunAndReturn(run func(context.Context, []fingerprint.Fingerprint, float64) (int, error)) *Tracker_CountMaliciousSimilarFingerprints_Call {
	_c.Call.Return(run)
	return _c
}

// FindSimilarFingerprints provides a mock function with given fields: ctx, fp
func (_m *Tracker) FindSimilarFingerprints(ctx context.Context, fp *fingerprint.Fingerprint) ([]fingerprint.Fingerprint, error) {
	ret := _m.Called(ctx, fp)

	if len(ret) == 0 {
		panic("no return value specified for FindSimilarFingerprints")
	}

	var r0 []fingerprint.Fingerprint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fingerprint.Fingerprint) ([]fingerprint.Fingerprint, error)); ok {
		return rf(ctx, fp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fingerprint.Fingerprint) []fingerprint.Fingerprint); ok {
		r0 = rf(ctx, fp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fingerprint.Fingerprint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fingerprint.Fingerprint) error); ok {
		r1 = rf(ctx, fp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tracker_FindSimilarFingerprints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSimilarFingerprints'
type Tracker_FindSimilarFingerprints_Call struct {
	*mock.Call
}

// FindSimilarFingerprints is a helper method to define mock.On call
//   - ctx context.Context
//   - fp *fingerprint.Fingerprint
func (_e *Tracker_Expecter) FindSimilarFingerprints(ctx interface{}, fp interface{}) *Tracker_FindSimilarFingerprints_Call {
	return &Tracker_FindSimilarFingerprints_Call{Call: _e.mock.On("FindSimilarFingerprints", ctx, fp)}
}

func (_c *Tracker_FindSimilarFingerprints_Call) Run(run func(ctx context.Context, fp *fingerprint.Fingerprint)) *Tracker_FindSimilarFingerprints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*fingerprint.Fingerprint))
	})
	return _c
}

func (_c *Tracker_FindSimilarFingerprints_Call) Return(_a0 []fingerprint.Fingerprint, _a1 error) *Tracker_FindSimilarFingerprints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Tracker_FindSimilarFingerprints_Call) RunAndReturn(run func(context.Context, *fingerprint.Fingerprint) ([]fingerprint.Fingerprint, error)) *Tracker_FindSimilarFingerprints_Call {
	_c.Call.Return(run)
	return _c
}

// GetFingerprint provides a mock function with given fields: ctx, id
func (_m *Tracker) GetFingerprint(ctx context.Context, id string) (*fingerprint.Fingerprint, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFingerprint")
	}

	var r0 *fingerprint.Fingerprint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*fingerprint.Fingerprint, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *fingerprint.Fingerprint); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fingerprint.Fingerprint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tracker_GetFingerprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFingerprint'
type Tracker_GetFingerprint_Call struct {
	*mock.Call
}

// GetFingerprint is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Tracker_Expecter) GetFingerprint(ctx interface{}, id interface{}) *Tracker_GetFingerprint_Call {
	return &Tracker_GetFingerprint_Call{Call: _e.mock.On("GetFingerprint", ctx, id)}
}

func (_c *Tracker_GetFingerprint_Call) Run(run func(ctx context.Context, id string)) *Tracker_GetFingerprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Tracker_GetFingerprint_Call) Return(_a0 *fingerprint.Fingerprint, _a1 error) *Tracker_GetFingerprint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Tracker_GetFingerprint_Call) RunAndReturn(run func(context.Context, string) (*fingerprint.Fingerprint, error)) *Tracker_GetFingerprint_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaliciousCount provides a mock function with given fields: ctx, id
func (_m *Tracker) GetMaliciousCount(ctx context.Context, id string) (int, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMaliciousCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tracker_GetMaliciousCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaliciousCount'
type Tracker_GetMaliciousCount_Call struct {
	*mock.Call
}

// GetMaliciousCount is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Tracker_Expecter) GetMaliciousCount(ctx interface{}, id interface{}) *Tracker_GetMaliciousCount_Call {
	return &Tracker_GetMaliciousCount_Call{Call: _e.mock.On("GetMaliciousCount", ctx, id)}
}

func (_c *Tracker_GetMaliciousCount_Call) Run(run func(ctx context.Context, id string)) *Tracker_GetMaliciousCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Tracker_GetMaliciousCount_Call) Return(_a0 int, _a1 error) *Tracker_GetMaliciousCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Tracker_GetMaliciousCount_Call) RunAndReturn(run func(context.Context, string) (int, error)) *Tracker_GetMaliciousCount_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementMaliciousCount provides a mock function with given fields: ctx, id, ttl
func (_m *Tracker) IncrementMaliciousCount(ctx context.Context, id string, ttl time.Duration) error {
	ret := _m.Called(ctx, id, ttl)

	if len(ret) == 0 {
		panic("no return value specified for IncrementMaliciousCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, id, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tracker_IncrementMaliciousCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementMaliciousCount'
type Tracker_IncrementMaliciousCount_Call struct {
	*mock.Call
}

// IncrementMaliciousCount is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - ttl time.Duration
func (_e *Tracker_Expecter) IncrementMaliciousCount(ctx interface{}, id interface{}, ttl interface{}) *Tracker_IncrementMaliciousCount_Call {
	return &Tracker_IncrementMaliciousCount_Call{Call: _e.mock.On("IncrementMaliciousCount", ctx, id, ttl)}
}

func (_c *Tracker_IncrementMaliciousCount_Call) Run(run func(ctx context.Context, id string, ttl time.Duration)) *Tracker_IncrementMaliciousCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *Tracker_IncrementMaliciousCount_Call) Return(_a0 error) *Tracker_IncrementMaliciousCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Tracker_IncrementMaliciousCount_Call) RunAndReturn(run func(context.Context, string, time.Duration) error) *Tracker_IncrementMaliciousCount_Call {
	_c.Call.Return(run)
	return _c
}

// IsFingerprintBlocked provides a mock function with given fields: ctx, fp
func (_m *Tracker) IsFingerprintBlocked(ctx context.Context, fp *fingerprint.Fingerprint) (bool, error) {
	ret := _m.Called(ctx, fp)

	if len(ret) == 0 {
		panic("no return value specified for IsFingerprintBlocked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fingerprint.Fingerprint) (bool, error)); ok {
		return rf(ctx, fp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fingerprint.Fingerprint) bool); ok {
		r0 = rf(ctx, fp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fingerprint.Fingerprint) error); ok {
		r1 = rf(ctx, fp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tracker_IsFingerprintBlocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFingerprintBlocked'
type Tracker_IsFingerprintBlocked_Call struct {
	*mock.Call
}

// IsFingerprintBlocked is a helper method to define mock.On call
//   - ctx context.Context
//   - fp *fingerprint.Fingerprint
func (_e *Tracker_Expecter) IsFingerprintBlocked(ctx interface{}, fp interface{}) *Tracker_IsFingerprintBlocked_Call {
	return &Tracker_IsFingerprintBlocked_Call{Call: _e.mock.On("IsFingerprintBlocked", ctx, fp)}
}

func (_c *Tracker_IsFingerprintBlocked_Call) Run(run func(ctx context.Context, fp *fingerprint.Fingerprint)) *Tracker_IsFingerprintBlocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*fingerprint.Fingerprint))
	})
	return _c
}

func (_c *Tracker_IsFingerprintBlocked_Call) Return(_a0 bool, _a1 error) *Tracker_IsFingerprintBlocked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Tracker_IsFingerprintBlocked_Call) RunAndReturn(run func(context.Context, *fingerprint.Fingerprint) (bool, error)) *Tracker_IsFingerprintBlocked_Call {
	_c.Call.Return(run)
	return _c
}

// MakeFingerprint provides a mock function with given fields: ctx
func (_m *Tracker) MakeFingerprint(ctx *fiber.Ctx) fingerprint.Fingerprint {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MakeFingerprint")
	}

	var r0 fingerprint.Fingerprint
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) fingerprint.Fingerprint); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(fingerprint.Fingerprint)
	}

	return r0
}

// Tracker_MakeFingerprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeFingerprint'
type Tracker_MakeFingerprint_Call struct {
	*mock.Call
}

// MakeFingerprint is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *Tracker_Expecter) MakeFingerprint(ctx interface{}) *Tracker_MakeFingerprint_Call {
	return &Tracker_MakeFingerprint_Call{Call: _e.mock.On("MakeFingerprint", ctx)}
}

func (_c *Tracker_MakeFingerprint_Call) Run(run func(ctx *fiber.Ctx)) *Tracker_MakeFingerprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *Tracker_MakeFingerprint_Call) Return(_a0 fingerprint.Fingerprint) *Tracker_MakeFingerprint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Tracker_MakeFingerprint_Call) RunAndReturn(run func(*fiber.Ctx) fingerprint.Fingerprint) *Tracker_MakeFingerprint_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: ctx, fp, ttl
func (_m *Tracker) Store(ctx context.Context, fp *fingerprint.Fingerprint, ttl time.Duration) error {
	ret := _m.Called(ctx, fp, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fingerprint.Fingerprint, time.Duration) error); ok {
		r0 = rf(ctx, fp, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tracker_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type Tracker_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - fp *fingerprint.Fingerprint
//   - ttl time.Duration
func (_e *Tracker_Expecter) Store(ctx interface{}, fp interface{}, ttl interface{}) *Tracker_Store_Call {
	return &Tracker_Store_Call{Call: _e.mock.On("Store", ctx, fp, ttl)}
}

func (_c *Tracker_Store_Call) Run(run func(ctx context.Context, fp *fingerprint.Fingerprint, ttl time.Duration)) *Tracker_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*fingerprint.Fingerprint), args[2].(time.Duration))
	})
	return _c
}

func (_c *Tracker_Store_Call) Return(_a0 error) *Tracker_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Tracker_Store_Call) RunAndReturn(run func(context.Context, *fingerprint.Fingerprint, time.Duration) error) *Tracker_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewTracker creates a new instance of Tracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tracker {
	mock := &Tracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
