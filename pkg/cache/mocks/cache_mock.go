// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	cache "github.com/NeuralTrust/TrustGate/pkg/cache"
	apikey "github.com/NeuralTrust/TrustGate/pkg/domain/iam/apikey"

	context "context"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/go-redis/redis/v8"

	service "github.com/NeuralTrust/TrustGate/pkg/domain/service"

	time "time"

	upstream "github.com/NeuralTrust/TrustGate/pkg/domain/upstream"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// Client provides a mock function with no fields
func (_m *Cache) Client() *redis.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 *redis.Client
	if rf, ok := ret.Get(0).(func() *redis.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Client)
		}
	}

	return r0
}

// Cache_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type Cache_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *Cache_Expecter) Client() *Cache_Client_Call {
	return &Cache_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *Cache_Client_Call) Run(run func()) *Cache_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_Client_Call) Return(_a0 *redis.Client) *Cache_Client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Client_Call) RunAndReturn(run func() *redis.Client) *Cache_Client_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTTLMap provides a mock function with given fields: name, ttl
func (_m *Cache) CreateTTLMap(name string, ttl time.Duration) *cache.TTLMap {
	ret := _m.Called(name, ttl)

	if len(ret) == 0 {
		panic("no return value specified for CreateTTLMap")
	}

	var r0 *cache.TTLMap
	if rf, ok := ret.Get(0).(func(string, time.Duration) *cache.TTLMap); ok {
		r0 = rf(name, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.TTLMap)
		}
	}

	return r0
}

// Cache_CreateTTLMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTTLMap'
type Cache_CreateTTLMap_Call struct {
	*mock.Call
}

// CreateTTLMap is a helper method to define mock.On call
//   - name string
//   - ttl time.Duration
func (_e *Cache_Expecter) CreateTTLMap(name interface{}, ttl interface{}) *Cache_CreateTTLMap_Call {
	return &Cache_CreateTTLMap_Call{Call: _e.mock.On("CreateTTLMap", name, ttl)}
}

func (_c *Cache_CreateTTLMap_Call) Run(run func(name string, ttl time.Duration)) *Cache_CreateTTLMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration))
	})
	return _c
}

func (_c *Cache_CreateTTLMap_Call) Return(_a0 *cache.TTLMap) *Cache_CreateTTLMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_CreateTTLMap_Call) RunAndReturn(run func(string, time.Duration) *cache.TTLMap) *Cache_CreateTTLMap_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, key
func (_m *Cache) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Cache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Cache_Expecter) Delete(ctx interface{}, key interface{}) *Cache_Delete_Call {
	return &Cache_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *Cache_Delete_Call) Run(run func(ctx context.Context, key string)) *Cache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_Delete_Call) Return(_a0 error) *Cache_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Delete_Call) RunAndReturn(run func(context.Context, string) error) *Cache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllByGatewayID provides a mock function with given fields: ctx, gatewayID
func (_m *Cache) DeleteAllByGatewayID(ctx context.Context, gatewayID string) error {
	ret := _m.Called(ctx, gatewayID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllByGatewayID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, gatewayID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_DeleteAllByGatewayID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllByGatewayID'
type Cache_DeleteAllByGatewayID_Call struct {
	*mock.Call
}

// DeleteAllByGatewayID is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID string
func (_e *Cache_Expecter) DeleteAllByGatewayID(ctx interface{}, gatewayID interface{}) *Cache_DeleteAllByGatewayID_Call {
	return &Cache_DeleteAllByGatewayID_Call{Call: _e.mock.On("DeleteAllByGatewayID", ctx, gatewayID)}
}

func (_c *Cache_DeleteAllByGatewayID_Call) Run(run func(ctx context.Context, gatewayID string)) *Cache_DeleteAllByGatewayID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_DeleteAllByGatewayID_Call) Return(_a0 error) *Cache_DeleteAllByGatewayID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_DeleteAllByGatewayID_Call) RunAndReturn(run func(context.Context, string) error) *Cache_DeleteAllByGatewayID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllPluginsData provides a mock function with given fields: ctx, gatewayID
func (_m *Cache) DeleteAllPluginsData(ctx context.Context, gatewayID string) error {
	ret := _m.Called(ctx, gatewayID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllPluginsData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, gatewayID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_DeleteAllPluginsData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllPluginsData'
type Cache_DeleteAllPluginsData_Call struct {
	*mock.Call
}

// DeleteAllPluginsData is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID string
func (_e *Cache_Expecter) DeleteAllPluginsData(ctx interface{}, gatewayID interface{}) *Cache_DeleteAllPluginsData_Call {
	return &Cache_DeleteAllPluginsData_Call{Call: _e.mock.On("DeleteAllPluginsData", ctx, gatewayID)}
}

func (_c *Cache_DeleteAllPluginsData_Call) Run(run func(ctx context.Context, gatewayID string)) *Cache_DeleteAllPluginsData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_DeleteAllPluginsData_Call) Return(_a0 error) *Cache_DeleteAllPluginsData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_DeleteAllPluginsData_Call) RunAndReturn(run func(context.Context, string) error) *Cache_DeleteAllPluginsData_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *Cache) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Cache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Cache_Expecter) Get(ctx interface{}, key interface{}) *Cache_Get_Call {
	return &Cache_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *Cache_Get_Call) Run(run func(ctx context.Context, key string)) *Cache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_Get_Call) Return(_a0 string, _a1 error) *Cache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Cache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiKey provides a mock function with given fields: ctx, key
func (_m *Cache) GetApiKey(ctx context.Context, key string) (*apikey.APIKey, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetApiKey")
	}

	var r0 *apikey.APIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*apikey.APIKey, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *apikey.APIKey); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apikey.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_GetApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiKey'
type Cache_GetApiKey_Call struct {
	*mock.Call
}

// GetApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Cache_Expecter) GetApiKey(ctx interface{}, key interface{}) *Cache_GetApiKey_Call {
	return &Cache_GetApiKey_Call{Call: _e.mock.On("GetApiKey", ctx, key)}
}

func (_c *Cache_GetApiKey_Call) Run(run func(ctx context.Context, key string)) *Cache_GetApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_GetApiKey_Call) Return(_a0 *apikey.APIKey, _a1 error) *Cache_GetApiKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_GetApiKey_Call) RunAndReturn(run func(context.Context, string) (*apikey.APIKey, error)) *Cache_GetApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: ctx, gatewayID, serviceID
func (_m *Cache) GetService(ctx context.Context, gatewayID string, serviceID string) (*service.Service, error) {
	ret := _m.Called(ctx, gatewayID, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *service.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*service.Service, error)); ok {
		return rf(ctx, gatewayID, serviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *service.Service); ok {
		r0 = rf(ctx, gatewayID, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, gatewayID, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type Cache_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID string
//   - serviceID string
func (_e *Cache_Expecter) GetService(ctx interface{}, gatewayID interface{}, serviceID interface{}) *Cache_GetService_Call {
	return &Cache_GetService_Call{Call: _e.mock.On("GetService", ctx, gatewayID, serviceID)}
}

func (_c *Cache_GetService_Call) Run(run func(ctx context.Context, gatewayID string, serviceID string)) *Cache_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Cache_GetService_Call) Return(_a0 *service.Service, _a1 error) *Cache_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_GetService_Call) RunAndReturn(run func(context.Context, string, string) (*service.Service, error)) *Cache_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetTTLMap provides a mock function with given fields: name
func (_m *Cache) GetTTLMap(name string) *cache.TTLMap {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetTTLMap")
	}

	var r0 *cache.TTLMap
	if rf, ok := ret.Get(0).(func(string) *cache.TTLMap); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.TTLMap)
		}
	}

	return r0
}

// Cache_GetTTLMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTTLMap'
type Cache_GetTTLMap_Call struct {
	*mock.Call
}

// GetTTLMap is a helper method to define mock.On call
//   - name string
func (_e *Cache_Expecter) GetTTLMap(name interface{}) *Cache_GetTTLMap_Call {
	return &Cache_GetTTLMap_Call{Call: _e.mock.On("GetTTLMap", name)}
}

func (_c *Cache_GetTTLMap_Call) Run(run func(name string)) *Cache_GetTTLMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Cache_GetTTLMap_Call) Return(_a0 *cache.TTLMap) *Cache_GetTTLMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_GetTTLMap_Call) RunAndReturn(run func(string) *cache.TTLMap) *Cache_GetTTLMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpstream provides a mock function with given fields: ctx, gatewayID, upstreamID
func (_m *Cache) GetUpstream(ctx context.Context, gatewayID string, upstreamID string) (*upstream.Upstream, error) {
	ret := _m.Called(ctx, gatewayID, upstreamID)

	if len(ret) == 0 {
		panic("no return value specified for GetUpstream")
	}

	var r0 *upstream.Upstream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*upstream.Upstream, error)); ok {
		return rf(ctx, gatewayID, upstreamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *upstream.Upstream); ok {
		r0 = rf(ctx, gatewayID, upstreamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*upstream.Upstream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, gatewayID, upstreamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_GetUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpstream'
type Cache_GetUpstream_Call struct {
	*mock.Call
}

// GetUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID string
//   - upstreamID string
func (_e *Cache_Expecter) GetUpstream(ctx interface{}, gatewayID interface{}, upstreamID interface{}) *Cache_GetUpstream_Call {
	return &Cache_GetUpstream_Call{Call: _e.mock.On("GetUpstream", ctx, gatewayID, upstreamID)}
}

func (_c *Cache_GetUpstream_Call) Run(run func(ctx context.Context, gatewayID string, upstreamID string)) *Cache_GetUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Cache_GetUpstream_Call) Return(_a0 *upstream.Upstream, _a1 error) *Cache_GetUpstream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_GetUpstream_Call) RunAndReturn(run func(context.Context, string, string) (*upstream.Upstream, error)) *Cache_GetUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAPIKey provides a mock function with given fields: ctx, key
func (_m *Cache) SaveAPIKey(ctx context.Context, key *apikey.APIKey) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for SaveAPIKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *apikey.APIKey) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_SaveAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAPIKey'
type Cache_SaveAPIKey_Call struct {
	*mock.Call
}

// SaveAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key *apikey.APIKey
func (_e *Cache_Expecter) SaveAPIKey(ctx interface{}, key interface{}) *Cache_SaveAPIKey_Call {
	return &Cache_SaveAPIKey_Call{Call: _e.mock.On("SaveAPIKey", ctx, key)}
}

func (_c *Cache_SaveAPIKey_Call) Run(run func(ctx context.Context, key *apikey.APIKey)) *Cache_SaveAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*apikey.APIKey))
	})
	return _c
}

func (_c *Cache_SaveAPIKey_Call) Return(_a0 error) *Cache_SaveAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_SaveAPIKey_Call) RunAndReturn(run func(context.Context, *apikey.APIKey) error) *Cache_SaveAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// SaveService provides a mock function with given fields: ctx, gatewayID, _a2
func (_m *Cache) SaveService(ctx context.Context, gatewayID string, _a2 *service.Service) error {
	ret := _m.Called(ctx, gatewayID, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SaveService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *service.Service) error); ok {
		r0 = rf(ctx, gatewayID, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_SaveService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveService'
type Cache_SaveService_Call struct {
	*mock.Call
}

// SaveService is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID string
//   - _a2 *service.Service
func (_e *Cache_Expecter) SaveService(ctx interface{}, gatewayID interface{}, _a2 interface{}) *Cache_SaveService_Call {
	return &Cache_SaveService_Call{Call: _e.mock.On("SaveService", ctx, gatewayID, _a2)}
}

func (_c *Cache_SaveService_Call) Run(run func(ctx context.Context, gatewayID string, _a2 *service.Service)) *Cache_SaveService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*service.Service))
	})
	return _c
}

func (_c *Cache_SaveService_Call) Return(_a0 error) *Cache_SaveService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_SaveService_Call) RunAndReturn(run func(context.Context, string, *service.Service) error) *Cache_SaveService_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUpstream provides a mock function with given fields: ctx, gatewayID, _a2
func (_m *Cache) SaveUpstream(ctx context.Context, gatewayID string, _a2 *upstream.Upstream) error {
	ret := _m.Called(ctx, gatewayID, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SaveUpstream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *upstream.Upstream) error); ok {
		r0 = rf(ctx, gatewayID, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_SaveUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUpstream'
type Cache_SaveUpstream_Call struct {
	*mock.Call
}

// SaveUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID string
//   - _a2 *upstream.Upstream
func (_e *Cache_Expecter) SaveUpstream(ctx interface{}, gatewayID interface{}, _a2 interface{}) *Cache_SaveUpstream_Call {
	return &Cache_SaveUpstream_Call{Call: _e.mock.On("SaveUpstream", ctx, gatewayID, _a2)}
}

func (_c *Cache_SaveUpstream_Call) Run(run func(ctx context.Context, gatewayID string, _a2 *upstream.Upstream)) *Cache_SaveUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*upstream.Upstream))
	})
	return _c
}

func (_c *Cache_SaveUpstream_Call) Return(_a0 error) *Cache_SaveUpstream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_SaveUpstream_Call) RunAndReturn(run func(context.Context, string, *upstream.Upstream) error) *Cache_SaveUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, expiration
func (_m *Cache) Set(ctx context.Context, key string, value string, expiration time.Duration) error {
	ret := _m.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Cache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
//   - expiration time.Duration
func (_e *Cache_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *Cache_Set_Call {
	return &Cache_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiration)}
}

func (_c *Cache_Set_Call) Run(run func(ctx context.Context, key string, value string, expiration time.Duration)) *Cache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *Cache_Set_Call) Return(_a0 error) *Cache_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Set_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) error) *Cache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
