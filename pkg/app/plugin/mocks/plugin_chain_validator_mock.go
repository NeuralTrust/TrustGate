// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/NeuralTrust/TrustGate/pkg/types"

	uuid "github.com/google/uuid"
)

// ValidatePluginChain is an autogenerated mock type for the ValidatePluginChain type
type ValidatePluginChain struct {
	mock.Mock
}

type ValidatePluginChain_Expecter struct {
	mock *mock.Mock
}

func (_m *ValidatePluginChain) EXPECT() *ValidatePluginChain_Expecter {
	return &ValidatePluginChain_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: ctx, gatewayID, plugins
func (_m *ValidatePluginChain) Validate(ctx context.Context, gatewayID uuid.UUID, plugins []types.PluginConfig) error {
	ret := _m.Called(ctx, gatewayID, plugins)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []types.PluginConfig) error); ok {
		r0 = rf(ctx, gatewayID, plugins)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidatePluginChain_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type ValidatePluginChain_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID uuid.UUID
//   - plugins []types.PluginConfig
func (_e *ValidatePluginChain_Expecter) Validate(ctx interface{}, gatewayID interface{}, plugins interface{}) *ValidatePluginChain_Validate_Call {
	return &ValidatePluginChain_Validate_Call{Call: _e.mock.On("Validate", ctx, gatewayID, plugins)}
}

func (_c *ValidatePluginChain_Validate_Call) Run(run func(ctx context.Context, gatewayID uuid.UUID, plugins []types.PluginConfig)) *ValidatePluginChain_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]types.PluginConfig))
	})
	return _c
}

func (_c *ValidatePluginChain_Validate_Call) Return(_a0 error) *ValidatePluginChain_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ValidatePluginChain_Validate_Call) RunAndReturn(run func(context.Context, uuid.UUID, []types.PluginConfig) error) *ValidatePluginChain_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewValidatePluginChain creates a new instance of ValidatePluginChain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidatePluginChain(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValidatePluginChain {
	mock := &ValidatePluginChain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
