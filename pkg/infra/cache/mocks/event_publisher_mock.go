// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	channel "github.com/NeuralTrust/TrustGate/pkg/infra/cache/channel"

	event "github.com/NeuralTrust/TrustGate/pkg/infra/cache/event"

	mock "github.com/stretchr/testify/mock"
)

// EventPublisher is an autogenerated mock type for the EventPublisher type
type EventPublisher struct {
	mock.Mock
}

type EventPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *EventPublisher) EXPECT() *EventPublisher_Expecter {
	return &EventPublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, _a1, ev
func (_m *EventPublisher) Publish(ctx context.Context, _a1 channel.Channel, ev event.Event) error {
	ret := _m.Called(ctx, _a1, ev)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, channel.Channel, event.Event) error); ok {
		r0 = rf(ctx, _a1, ev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type EventPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 channel.Channel
//   - ev event.Event
func (_e *EventPublisher_Expecter) Publish(ctx interface{}, _a1 interface{}, ev interface{}) *EventPublisher_Publish_Call {
	return &EventPublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, _a1, ev)}
}

func (_c *EventPublisher_Publish_Call) Run(run func(ctx context.Context, _a1 channel.Channel, ev event.Event)) *EventPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(channel.Channel), args[2].(event.Event))
	})
	return _c
}

func (_c *EventPublisher_Publish_Call) Return(_a0 error) *EventPublisher_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventPublisher_Publish_Call) RunAndReturn(run func(context.Context, channel.Channel, event.Event) error) *EventPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventPublisher creates a new instance of EventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventPublisher {
	mock := &EventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
