// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	"github.com/NeuralTrust/TrustGate/pkg/infra/auth/jwt"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function with no fields
func (_m *Manager) CreateToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type Manager_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
func (_e *Manager_Expecter) CreateToken() *Manager_CreateToken_Call {
	return &Manager_CreateToken_Call{Call: _e.mock.On("CreateToken")}
}

func (_c *Manager_CreateToken_Call) Run(run func()) *Manager_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_CreateToken_Call) Return(_a0 string, _a1 error) *Manager_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_CreateToken_Call) RunAndReturn(run func() (string, error)) *Manager_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// DecodeToken provides a mock function with given fields: tokenString
func (_m *Manager) DecodeToken(tokenString string) (*jwt.Claims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for DecodeToken")
	}

	var r0 *jwt.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.Claims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Claims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_DecodeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeToken'
type Manager_DecodeToken_Call struct {
	*mock.Call
}

// DecodeToken is a helper method to define mock.On call
//   - tokenString string
func (_e *Manager_Expecter) DecodeToken(tokenString interface{}) *Manager_DecodeToken_Call {
	return &Manager_DecodeToken_Call{Call: _e.mock.On("DecodeToken", tokenString)}
}

func (_c *Manager_DecodeToken_Call) Run(run func(tokenString string)) *Manager_DecodeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_DecodeToken_Call) Return(_a0 *jwt.Claims, _a1 error) *Manager_DecodeToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_DecodeToken_Call) RunAndReturn(run func(string) (*jwt.Claims, error)) *Manager_DecodeToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *Manager) ValidateToken(tokenString string) error {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type Manager_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - tokenString string
func (_e *Manager_Expecter) ValidateToken(tokenString interface{}) *Manager_ValidateToken_Call {
	return &Manager_ValidateToken_Call{Call: _e.mock.On("ValidateToken", tokenString)}
}

func (_c *Manager_ValidateToken_Call) Run(run func(tokenString string)) *Manager_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_ValidateToken_Call) Return(_a0 error) *Manager_ValidateToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_ValidateToken_Call) RunAndReturn(run func(string) error) *Manager_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
