// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	providers "github.com/NeuralTrust/TrustGate/pkg/infra/providers"
	mock "github.com/stretchr/testify/mock"
)

// ProviderLocator is an autogenerated mock type for the ProviderLocator type
type ProviderLocator struct {
	mock.Mock
}

type ProviderLocator_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderLocator) EXPECT() *ProviderLocator_Expecter {
	return &ProviderLocator_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: provider
func (_m *ProviderLocator) Get(provider string) (providers.Client, error) {
	ret := _m.Called(provider)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 providers.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (providers.Client, error)); ok {
		return rf(provider)
	}
	if rf, ok := ret.Get(0).(func(string) providers.Client); ok {
		r0 = rf(provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(providers.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderLocator_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ProviderLocator_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - provider string
func (_e *ProviderLocator_Expecter) Get(provider interface{}) *ProviderLocator_Get_Call {
	return &ProviderLocator_Get_Call{Call: _e.mock.On("Get", provider)}
}

func (_c *ProviderLocator_Get_Call) Run(run func(provider string)) *ProviderLocator_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ProviderLocator_Get_Call) Return(_a0 providers.Client, _a1 error) *ProviderLocator_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProviderLocator_Get_Call) RunAndReturn(run func(string) (providers.Client, error)) *ProviderLocator_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewProviderLocator creates a new instance of ProviderLocator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderLocator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderLocator {
	mock := &ProviderLocator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
