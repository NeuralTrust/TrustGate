// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	upstream "github.com/NeuralTrust/TrustGate/pkg/domain/upstream"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateUpstream provides a mock function with given fields: ctx, _a1
func (_m *Repository) CreateUpstream(ctx context.Context, _a1 *upstream.Upstream) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpstream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *upstream.Upstream) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CreateUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUpstream'
type Repository_CreateUpstream_Call struct {
	*mock.Call
}

// CreateUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *upstream.Upstream
func (_e *Repository_Expecter) CreateUpstream(ctx interface{}, _a1 interface{}) *Repository_CreateUpstream_Call {
	return &Repository_CreateUpstream_Call{Call: _e.mock.On("CreateUpstream", ctx, _a1)}
}

func (_c *Repository_CreateUpstream_Call) Run(run func(ctx context.Context, _a1 *upstream.Upstream)) *Repository_CreateUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*upstream.Upstream))
	})
	return _c
}

func (_c *Repository_CreateUpstream_Call) Return(_a0 error) *Repository_CreateUpstream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CreateUpstream_Call) RunAndReturn(run func(context.Context, *upstream.Upstream) error) *Repository_CreateUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUpstream provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteUpstream(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUpstream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUpstream'
type Repository_DeleteUpstream_Call struct {
	*mock.Call
}

// DeleteUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repository_Expecter) DeleteUpstream(ctx interface{}, id interface{}) *Repository_DeleteUpstream_Call {
	return &Repository_DeleteUpstream_Call{Call: _e.mock.On("DeleteUpstream", ctx, id)}
}

func (_c *Repository_DeleteUpstream_Call) Run(run func(ctx context.Context, id string)) *Repository_DeleteUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_DeleteUpstream_Call) Return(_a0 error) *Repository_DeleteUpstream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_DeleteUpstream_Call) RunAndReturn(run func(context.Context, string) error) *Repository_DeleteUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpstream provides a mock function with given fields: ctx, id
func (_m *Repository) GetUpstream(ctx context.Context, id uuid.UUID) (*upstream.Upstream, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUpstream")
	}

	var r0 *upstream.Upstream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*upstream.Upstream, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *upstream.Upstream); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*upstream.Upstream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpstream'
type Repository_GetUpstream_Call struct {
	*mock.Call
}

// GetUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Repository_Expecter) GetUpstream(ctx interface{}, id interface{}) *Repository_GetUpstream_Call {
	return &Repository_GetUpstream_Call{Call: _e.mock.On("GetUpstream", ctx, id)}
}

func (_c *Repository_GetUpstream_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Repository_GetUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_GetUpstream_Call) Return(_a0 *upstream.Upstream, _a1 error) *Repository_GetUpstream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetUpstream_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*upstream.Upstream, error)) *Repository_GetUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// ListUpstreams provides a mock function with given fields: ctx, gatewayID, offset, limit
func (_m *Repository) ListUpstreams(ctx context.Context, gatewayID uuid.UUID, offset int, limit int) ([]upstream.Upstream, error) {
	ret := _m.Called(ctx, gatewayID, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListUpstreams")
	}

	var r0 []upstream.Upstream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]upstream.Upstream, error)); ok {
		return rf(ctx, gatewayID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []upstream.Upstream); ok {
		r0 = rf(ctx, gatewayID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]upstream.Upstream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, gatewayID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ListUpstreams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUpstreams'
type Repository_ListUpstreams_Call struct {
	*mock.Call
}

// ListUpstreams is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID uuid.UUID
//   - offset int
//   - limit int
func (_e *Repository_Expecter) ListUpstreams(ctx interface{}, gatewayID interface{}, offset interface{}, limit interface{}) *Repository_ListUpstreams_Call {
	return &Repository_ListUpstreams_Call{Call: _e.mock.On("ListUpstreams", ctx, gatewayID, offset, limit)}
}

func (_c *Repository_ListUpstreams_Call) Run(run func(ctx context.Context, gatewayID uuid.UUID, offset int, limit int)) *Repository_ListUpstreams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *Repository_ListUpstreams_Call) Return(_a0 []upstream.Upstream, _a1 error) *Repository_ListUpstreams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ListUpstreams_Call) RunAndReturn(run func(context.Context, uuid.UUID, int, int) ([]upstream.Upstream, error)) *Repository_ListUpstreams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUpstream provides a mock function with given fields: ctx, _a1
func (_m *Repository) UpdateUpstream(ctx context.Context, _a1 *upstream.Upstream) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUpstream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *upstream.Upstream) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpdateUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUpstream'
type Repository_UpdateUpstream_Call struct {
	*mock.Call
}

// UpdateUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *upstream.Upstream
func (_e *Repository_Expecter) UpdateUpstream(ctx interface{}, _a1 interface{}) *Repository_UpdateUpstream_Call {
	return &Repository_UpdateUpstream_Call{Call: _e.mock.On("UpdateUpstream", ctx, _a1)}
}

func (_c *Repository_UpdateUpstream_Call) Run(run func(ctx context.Context, _a1 *upstream.Upstream)) *Repository_UpdateUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*upstream.Upstream))
	})
	return _c
}

func (_c *Repository_UpdateUpstream_Call) Return(_a0 error) *Repository_UpdateUpstream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UpdateUpstream_Call) RunAndReturn(run func(context.Context, *upstream.Upstream) error) *Repository_UpdateUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
