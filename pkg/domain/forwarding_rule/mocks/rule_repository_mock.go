// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	forwarding_rule "github.com/NeuralTrust/TrustGate/pkg/domain/forwarding_rule"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, rule
func (_m *Repository) Create(ctx context.Context, rule *forwarding_rule.ForwardingRule) error {
	ret := _m.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *forwarding_rule.ForwardingRule) error); ok {
		r0 = rf(ctx, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - rule *forwarding_rule.ForwardingRule
func (_e *Repository_Expecter) Create(ctx interface{}, rule interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", ctx, rule)}
}

func (_c *Repository_Create_Call) Run(run func(ctx context.Context, rule *forwarding_rule.ForwardingRule)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*forwarding_rule.ForwardingRule))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 error) *Repository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, *forwarding_rule.ForwardingRule) error) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id, gatewayID
func (_m *Repository) Delete(ctx context.Context, id uuid.UUID, gatewayID uuid.UUID) error {
	ret := _m.Called(ctx, id, gatewayID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, gatewayID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - gatewayID uuid.UUID
func (_e *Repository_Expecter) Delete(ctx interface{}, id interface{}, gatewayID interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", ctx, id, gatewayID)}
}

func (_c *Repository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID, gatewayID uuid.UUID)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *Repository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIds provides a mock function with given fields: ctx, ids, gatewayID
func (_m *Repository) FindByIds(ctx context.Context, ids []uuid.UUID, gatewayID uuid.UUID) ([]forwarding_rule.ForwardingRule, error) {
	ret := _m.Called(ctx, ids, gatewayID)

	if len(ret) == 0 {
		panic("no return value specified for FindByIds")
	}

	var r0 []forwarding_rule.ForwardingRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, uuid.UUID) ([]forwarding_rule.ForwardingRule, error)); ok {
		return rf(ctx, ids, gatewayID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, uuid.UUID) []forwarding_rule.ForwardingRule); ok {
		r0 = rf(ctx, ids, gatewayID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]forwarding_rule.ForwardingRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, ids, gatewayID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIds'
type Repository_FindByIds_Call struct {
	*mock.Call
}

// FindByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
//   - gatewayID uuid.UUID
func (_e *Repository_Expecter) FindByIds(ctx interface{}, ids interface{}, gatewayID interface{}) *Repository_FindByIds_Call {
	return &Repository_FindByIds_Call{Call: _e.mock.On("FindByIds", ctx, ids, gatewayID)}
}

func (_c *Repository_FindByIds_Call) Run(run func(ctx context.Context, ids []uuid.UUID, gatewayID uuid.UUID)) *Repository_FindByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_FindByIds_Call) Return(_a0 []forwarding_rule.ForwardingRule, _a1 error) *Repository_FindByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID, uuid.UUID) ([]forwarding_rule.ForwardingRule, error)) *Repository_FindByIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetRule provides a mock function with given fields: ctx, id, gatewayID
func (_m *Repository) GetRule(ctx context.Context, id uuid.UUID, gatewayID uuid.UUID) (*forwarding_rule.ForwardingRule, error) {
	ret := _m.Called(ctx, id, gatewayID)

	if len(ret) == 0 {
		panic("no return value specified for GetRule")
	}

	var r0 *forwarding_rule.ForwardingRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*forwarding_rule.ForwardingRule, error)); ok {
		return rf(ctx, id, gatewayID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *forwarding_rule.ForwardingRule); ok {
		r0 = rf(ctx, id, gatewayID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarding_rule.ForwardingRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, id, gatewayID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRule'
type Repository_GetRule_Call struct {
	*mock.Call
}

// GetRule is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - gatewayID uuid.UUID
func (_e *Repository_Expecter) GetRule(ctx interface{}, id interface{}, gatewayID interface{}) *Repository_GetRule_Call {
	return &Repository_GetRule_Call{Call: _e.mock.On("GetRule", ctx, id, gatewayID)}
}

func (_c *Repository_GetRule_Call) Run(run func(ctx context.Context, id uuid.UUID, gatewayID uuid.UUID)) *Repository_GetRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_GetRule_Call) Return(_a0 *forwarding_rule.ForwardingRule, _a1 error) *Repository_GetRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetRule_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*forwarding_rule.ForwardingRule, error)) *Repository_GetRule_Call {
	_c.Call.Return(run)
	return _c
}

// GetRuleByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetRuleByID(ctx context.Context, id uuid.UUID) (*forwarding_rule.ForwardingRule, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRuleByID")
	}

	var r0 *forwarding_rule.ForwardingRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*forwarding_rule.ForwardingRule, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *forwarding_rule.ForwardingRule); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarding_rule.ForwardingRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetRuleByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRuleByID'
type Repository_GetRuleByID_Call struct {
	*mock.Call
}

// GetRuleByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Repository_Expecter) GetRuleByID(ctx interface{}, id interface{}) *Repository_GetRuleByID_Call {
	return &Repository_GetRuleByID_Call{Call: _e.mock.On("GetRuleByID", ctx, id)}
}

func (_c *Repository_GetRuleByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Repository_GetRuleByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_GetRuleByID_Call) Return(_a0 *forwarding_rule.ForwardingRule, _a1 error) *Repository_GetRuleByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetRuleByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*forwarding_rule.ForwardingRule, error)) *Repository_GetRuleByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListRules provides a mock function with given fields: ctx, gatewayID
func (_m *Repository) ListRules(ctx context.Context, gatewayID uuid.UUID) ([]forwarding_rule.ForwardingRule, error) {
	ret := _m.Called(ctx, gatewayID)

	if len(ret) == 0 {
		panic("no return value specified for ListRules")
	}

	var r0 []forwarding_rule.ForwardingRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]forwarding_rule.ForwardingRule, error)); ok {
		return rf(ctx, gatewayID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []forwarding_rule.ForwardingRule); ok {
		r0 = rf(ctx, gatewayID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]forwarding_rule.ForwardingRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, gatewayID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ListRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRules'
type Repository_ListRules_Call struct {
	*mock.Call
}

// ListRules is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID uuid.UUID
func (_e *Repository_Expecter) ListRules(ctx interface{}, gatewayID interface{}) *Repository_ListRules_Call {
	return &Repository_ListRules_Call{Call: _e.mock.On("ListRules", ctx, gatewayID)}
}

func (_c *Repository_ListRules_Call) Run(run func(ctx context.Context, gatewayID uuid.UUID)) *Repository_ListRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_ListRules_Call) Return(_a0 []forwarding_rule.ForwardingRule, _a1 error) *Repository_ListRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ListRules_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]forwarding_rule.ForwardingRule, error)) *Repository_ListRules_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, rule
func (_m *Repository) Update(ctx context.Context, rule *forwarding_rule.ForwardingRule) error {
	ret := _m.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *forwarding_rule.ForwardingRule) error); ok {
		r0 = rf(ctx, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - rule *forwarding_rule.ForwardingRule
func (_e *Repository_Expecter) Update(ctx interface{}, rule interface{}) *Repository_Update_Call {
	return &Repository_Update_Call{Call: _e.mock.On("Update", ctx, rule)}
}

func (_c *Repository_Update_Call) Run(run func(ctx context.Context, rule *forwarding_rule.ForwardingRule)) *Repository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*forwarding_rule.ForwardingRule))
	})
	return _c
}

func (_c *Repository_Update_Call) Return(_a0 error) *Repository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Update_Call) RunAndReturn(run func(context.Context, *forwarding_rule.ForwardingRule) error) *Repository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRulesCache provides a mock function with given fields: ctx, gatewayID, rules
func (_m *Repository) UpdateRulesCache(ctx context.Context, gatewayID uuid.UUID, rules []forwarding_rule.ForwardingRule) error {
	ret := _m.Called(ctx, gatewayID, rules)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRulesCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []forwarding_rule.ForwardingRule) error); ok {
		r0 = rf(ctx, gatewayID, rules)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpdateRulesCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRulesCache'
type Repository_UpdateRulesCache_Call struct {
	*mock.Call
}

// UpdateRulesCache is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID uuid.UUID
//   - rules []forwarding_rule.ForwardingRule
func (_e *Repository_Expecter) UpdateRulesCache(ctx interface{}, gatewayID interface{}, rules interface{}) *Repository_UpdateRulesCache_Call {
	return &Repository_UpdateRulesCache_Call{Call: _e.mock.On("UpdateRulesCache", ctx, gatewayID, rules)}
}

func (_c *Repository_UpdateRulesCache_Call) Run(run func(ctx context.Context, gatewayID uuid.UUID, rules []forwarding_rule.ForwardingRule)) *Repository_UpdateRulesCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]forwarding_rule.ForwardingRule))
	})
	return _c
}

func (_c *Repository_UpdateRulesCache_Call) Return(_a0 error) *Repository_UpdateRulesCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UpdateRulesCache_Call) RunAndReturn(run func(context.Context, uuid.UUID, []forwarding_rule.ForwardingRule) error) *Repository_UpdateRulesCache_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
