name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ai_gateway
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      oauth:
        image: wiremock/wiremock:2.35.0
        ports:
          - 9090:8080
        options: >-
          --health-cmd "wget -qO- http://localhost:8080/__admin/ || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          check-latest: true
          cache: false  # Disable Go module cache

      - name: Install dependencies
        run: |
          go clean -modcache
          go mod tidy && go mod vendor

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          skip-cache: true  # Skip using cache for linter
          args: --timeout=5m  # Increase timeout to 5 minutes
          only-new-issues: true  # Only report new issues

      - name: Configure Dummy OAuth server (WireMock)
        run: |
          echo "Waiting for WireMock to be ready..."
          for i in {1..60}; do
            curl -sf http://localhost:9090/__admin/ && break || sleep 1
          done
          echo "Stubbing /oauth/token endpoint"
          curl -sf -X POST http://localhost:9090/__admin/mappings \
            -H 'Content-Type: application/json' \
            -d '{
                  "request": {
                    "method": "POST",
                    "urlPath": "/oauth/token"
                  },
                  "response": {
                    "status": 200,
                    "headers": { "Content-Type": "application/json" },
                    "jsonBody": { "access_token": "ci-dummy-token", "expires_in": 3600 }
                  }
                }'

      - name: Copy environment file
        run: cp .env.example .env && cp .env.example .env.functional

      - name: Set up environment variables
        run: |
          echo "" >> .env.functional
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env.functional
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env.functional
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env.functional
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env.functional
          echo "GUARDRAIL_ID=${{ secrets.GUARDRAIL_ID }}" >> .env.functional
          echo "GUARDRAIL_VERSION=${{ secrets.GUARDRAIL_VERSION }}" >> .env.functional
          echo "AZURE_API_KEY=${{ secrets.AZURE_API_KEY }}" >> .env.functional
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.functional
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env.functional
          echo "NEURAL_TRUST_FIREWALL_URL=${{ secrets.NEURAL_TRUST_FIREWALL_URL }}" >> .env.functional
          echo "NEURAL_TRUST_FIREWALL_API_KEY=${{ secrets.NEURAL_TRUST_FIREWALL_API_KEY }}" >> .env.functional

      - name: Debug environment file
        run: cat .env.functional

      - name: Run Unit tests
        run: go test -v -race -coverprofile=unit-coverage.txt -covermode=atomic ./pkg/...

      - name: Run Functional tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./tests/functional

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./unit-coverage.txt
          flags: unittests 